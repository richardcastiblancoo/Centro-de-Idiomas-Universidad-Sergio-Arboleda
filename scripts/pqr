-- Tabla: public.pqrs
create table public.pqrs (
  id uuid primary key default gen_random_uuid(),
  subject text not null,
  message text not null,
  status text not null default 'pending' check (status in ('pending', 'in_progress', 'resolved', 'closed')),
  student_id uuid not null references public.users(id), -- Estudiante que crea el PQR
  course_id uuid not null references public.courses(id), -- Curso asociado al PQR
  coordinator_id uuid references public.users(id), -- Coordinador asignado (opcional)
  coordinator_response text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

-- Habilitar RLS en la tabla `pqrs`
alter table public.pqrs enable row level security;

-- Política para que cualquier usuario pueda crear un PQR
create policy "Students can create PQR." on public.pqrs
  for insert with check (auth.uid() = student_id);

-- Política para que el estudiante que creó el PQR pueda verlo
create policy "Students can view their own PQR." on public.pqrs
  for select using (auth.uid() = student_id);

-- Política para que los coordinadores puedan ver todos los PQR
create policy "Coordinators can view all PQR." on public.pqrs
  for select using ((select role from public.users where id = auth.uid()) = 'coordinator');

-- Política para que los coordinadores puedan actualizar PQR
create policy "Coordinators can update PQR." on public.pqrs
  for update using ((select role from public.users where id = auth.uid()) = 'coordinator');

-- Trigger para actualizar el campo `updated_at`
create function public.update_updated_at_column()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger update_pqrs_updated_at
  before update on public.pqrs
  for each row execute procedure public.update_updated_at_column();